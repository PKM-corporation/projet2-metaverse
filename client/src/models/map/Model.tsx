/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef } from 'react';
import { useBox } from '@react-three/cannon';
import { useGLTF } from '@react-three/drei';
import { TMapGLTF } from '../../interfaces/model.interface';
import { Group } from 'three';

export default function Model({ ...props }) {
    // Bar
    useBox(() => ({
        mass: 1,
        type: 'Static',
        args: [9, 1.18, 0.8],
        material: {
            friction: 0,
            restitution: 0,
        },
        position: [-6.3, 0, 5.8],
        rotation: [0, Math.PI / 2, 0],
    }));
    useBox(() => ({
        mass: 1,
        type: 'Static',
        args: [4, 1.18, 0.8],
        material: {
            friction: 0,
            restitution: 0,
        },
        position: [-8.3, 0, 1.6],
    }));

    // Walls
    useBox(() => ({
        mass: 1,
        type: 'Static',
        args: [20, 6, 0.5],
        material: {
            friction: 0,
            restitution: 0,
        },
        position: [0, 2.5, 10.2],
    }));
    useBox(() => ({
        mass: 1,
        type: 'Static',
        args: [20, 6, 0.5],
        material: {
            friction: 0,
            restitution: 0,
        },
        position: [0, 2.5, -10.2],
    }));
    useBox(() => ({
        mass: 1,
        type: 'Static',
        args: [20, 6, 0.5],
        material: {
            friction: 0,
            restitution: 0,
        },
        position: [10.2, 2.5, 0],
        rotation: [0, Math.PI / 2, 0],
    }));
    useBox(() => ({
        mass: 1,
        type: 'Static',
        args: [20, 6, 0.5],
        material: {
            friction: 0,
            restitution: 0,
        },
        position: [-10.2, 2.5, 0],
        rotation: [0, Math.PI / 2, 0],
    }));

    // Platform
    useBox(() => ({
        mass: 1,
        type: 'Static',
        args: [10, 0.3, 6.2],
        material: {
            friction: 0,
            restitution: 0,
        },
        position: [2.5, -0.09, 5.55],
        rotation: [0, Math.PI / 2, 0],
    }));

    const group = useRef<Group>(null);
    const { nodes, materials } = useGLTF('/models/map-worldtf.glb') as unknown as TMapGLTF;
    return (
        <>
            <group castShadow receiveShadow ref={group} {...props} dispose={null}>
                <group position={[0, 2.5, 0]} castShadow={true} receiveShadow={true}>
                    <mesh geometry={nodes.Cube_1.geometry} material={materials['Material.003']} />
                    <mesh geometry={nodes.Cube_2.geometry} material={materials['Material.004']} />
                    <mesh geometry={nodes.Cube_3.geometry} material={materials['Material.005']} />
                    <mesh geometry={nodes.Cube_4.geometry} material={materials['Material.007']} />
                </group>
                <group position={[-6.76, 0.63, 4.28]} castShadow={true} receiveShadow={true}>
                    <mesh geometry={nodes.Cube004_1.geometry} material={materials['Material.001']} />
                    <mesh geometry={nodes.Cube004_2.geometry} material={materials['Material.002']} />
                </group>
                <group position={[2.51, 0.17, 5.28]} scale={[1, 0.57, 1]} castShadow={true} receiveShadow={true}>
                    <mesh geometry={nodes.Cube005_1.geometry} material={materials['Material.006']} />
                    <mesh geometry={nodes.Cube005_2.geometry} material={materials['Material.002']} />
                </group>
                <mesh
                    castShadow={true}
                    receiveShadow={true}
                    geometry={nodes.Cube004.geometry}
                    material={materials['Material.008']}
                    position={[-3.32, 1.95, 0]}
                    scale={1.33}
                />
                <mesh
                    castShadow={true}
                    receiveShadow={true}
                    geometry={nodes.Cube005.geometry}
                    material={materials['Material.008']}
                    position={[12.69, 0.84, 0]}
                    scale={[1, 1, 10.1]}
                />
            </group>
        </>
    );
}

useGLTF.preload('/map-worldtf.glb');
