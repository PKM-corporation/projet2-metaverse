/* eslint-disable react/prop-types */
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useEffect, useMemo } from 'react';
import { useGraph } from '@react-three/fiber';
import { useGLTF, useAnimations } from '@react-three/drei';
import { clone } from 'three/examples/jsm/utils/SkeletonUtils';
import { useSelector } from 'react-redux';

export default function Model({ ...props }) {
    const player = useSelector((state) => state.players[props.playerId]);
    const group = useRef();
    const { scene, materials, animations } = useGLTF('/models/playerModels/the_boss.glb');
    const clones = useMemo(() => clone(scene), [scene]);
    const { nodes } = useGraph(clones);
    const { actions } = useAnimations(animations, group);
    useEffect(() => {
        actions.Idle.play();
    }, []);
    useEffect(() => {
        if (!player.animation) return;
        switch (player.animation) {
            case 'Jumping':
                actions.Idle.stop();
                actions.Walking_forward.stop();
                actions.Walking_backward.stop();
                actions.Running_right.stop();
                actions.Running_left.stop();
                actions.Running_forward.stop();
                actions.Running_backward.stop();
                actions.Jumping.play();
                break;
            case 'Walking_forward':
                actions.Walking_forward.play();
                actions.Walking_backward.stop();
                actions.Running_right.stop();
                actions.Running_left.stop();
                actions.Running_forward.stop();
                actions.Running_backward.stop();
                actions.Idle.stop();
                actions.Jumping.stop();
                break;
            case 'Walking_left':
                actions.Walking_left.play();
                actions.Walking_right.stop();
                actions.Walking_forward.stop();
                actions.Walking_backward.stop();
                actions.Running_right.stop();
                actions.Running_left.stop();
                actions.Running_forward.stop();
                actions.Running_backward.stop();
                actions.Idle.stop();
                actions.Jumping.stop();
                break;
            case 'Walking_right':
                actions.Walking_right.play();
                actions.Walking_left.stop();
                actions.Walking_forward.stop();
                actions.Walking_backward.stop();
                actions.Running_right.stop();
                actions.Running_left.stop();
                actions.Running_forward.stop();
                actions.Running_backward.stop();
                actions.Idle.stop();
                actions.Jumping.stop();
                break;
            case 'Walking_backward':
                actions.Walking_backward.play();
                actions.Running_right.stop();
                actions.Running_left.stop();
                actions.Walking_forward.stop();
                actions.Running_forward.stop();
                actions.Running_backward.stop();
                actions.Idle.stop();
                actions.Jumping.stop();
                break;
            case 'Running_forward':
                actions.Running_forward.play();
                actions.Running_right.stop();
                actions.Running_left.stop();
                actions.Running_backward.stop();
                actions.Walking_forward.stop();
                actions.Walking_backward.stop();
                actions.Idle.stop();
                actions.Jumping.stop();
                break;
            case 'Running_left':
                actions.Running_left.play();
                actions.Running_right.stop();
                actions.Running_forward.stop();
                actions.Running_backward.stop();
                actions.Walking_forward.stop();
                actions.Walking_backward.stop();
                actions.Idle.stop();
                actions.Jumping.stop();
                break;
            case 'Running_right':
                actions.Running_right.play();
                actions.Running_left.stop();
                actions.Running_forward.stop();
                actions.Running_backward.stop();
                actions.Walking_forward.stop();
                actions.Walking_backward.stop();
                actions.Idle.stop();
                actions.Jumping.stop();
                break;
            case 'Running_backward':
                actions.Running_backward.play();
                actions.Running_forward.stop();
                actions.Running_right.stop();
                actions.Running_left.stop();
                actions.Walking_forward.stop();
                actions.Walking_backward.stop();
                actions.Idle.stop();
                actions.Jumping.stop();
                break;
            case 'Idle':
                actions.Idle.play();
                actions.Walking_forward.stop();
                actions.Walking_backward.stop();
                actions.Walking_right.stop();
                actions.Walking_left.stop();
                actions.Running_forward.stop();
                actions.Running_backward.stop();
                actions.Running_right.stop();
                actions.Running_left.stop();
                actions.Jumping.stop();
                break;
            default:
                break;
        }
    }, [player.animation]);
    return (
        <group ref={group} {...props} dispose={null}>
            <group name="Scene">
                <group name="mixamorigMeshes" rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
                <group name="Armature" rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
                    <primitive object={nodes.mixamorigHips} />
                    <skinnedMesh
                        name="mixamorigArms_Geo"
                        geometry={nodes.mixamorigArms_Geo.geometry}
                        material={materials.Skin_MAT}
                        skeleton={nodes.mixamorigArms_Geo.skeleton}
                    />
                    <skinnedMesh
                        name="mixamorigCigar_Geo"
                        geometry={nodes.mixamorigCigar_Geo.geometry}
                        material={materials.Cigar_Mat}
                        skeleton={nodes.mixamorigCigar_Geo.skeleton}
                    />
                    <skinnedMesh
                        name="mixamorigHat_Geo"
                        geometry={nodes.mixamorigHat_Geo.geometry}
                        material={materials['Clothes_MAT.001']}
                        skeleton={nodes.mixamorigHat_Geo.skeleton}
                    />
                    <skinnedMesh
                        name="mixamorigHead_Geo"
                        geometry={nodes.mixamorigHead_Geo.geometry}
                        material={materials.Skin_MAT}
                        skeleton={nodes.mixamorigHead_Geo.skeleton}
                    />
                    <skinnedMesh
                        name="mixamorigJacket_Geo"
                        geometry={nodes.mixamorigJacket_Geo.geometry}
                        material={materials.Clothes_MAT}
                        skeleton={nodes.mixamorigJacket_Geo.skeleton}
                    />
                    <skinnedMesh
                        name="mixamorigL_Eye_Geo"
                        geometry={nodes.mixamorigL_Eye_Geo.geometry}
                        material={materials['Eyes_MAT.001']}
                        skeleton={nodes.mixamorigL_Eye_Geo.skeleton}
                    />
                    <skinnedMesh
                        name="mixamorigPants_Geo"
                        geometry={nodes.mixamorigPants_Geo.geometry}
                        material={materials['Clothes_MAT.001']}
                        skeleton={nodes.mixamorigPants_Geo.skeleton}
                    />
                    <skinnedMesh
                        name="mixamorigR_Eye_Geo"
                        geometry={nodes.mixamorigR_Eye_Geo.geometry}
                        material={materials.Eyes_MAT}
                        skeleton={nodes.mixamorigR_Eye_Geo.skeleton}
                    />
                    <skinnedMesh
                        name="mixamorigShoes_Geo"
                        geometry={nodes.mixamorigShoes_Geo.geometry}
                        material={materials['Clothes_MAT.001']}
                        skeleton={nodes.mixamorigShoes_Geo.skeleton}
                    />
                    <skinnedMesh
                        name="mixamorigTeeth_Down_Geo"
                        geometry={nodes.mixamorigTeeth_Down_Geo.geometry}
                        material={materials.Skin_MAT}
                        skeleton={nodes.mixamorigTeeth_Down_Geo.skeleton}
                    />
                    <skinnedMesh
                        name="mixamorigTeeth_Up_Geo"
                        geometry={nodes.mixamorigTeeth_Up_Geo.geometry}
                        material={materials.Skin_MAT}
                        skeleton={nodes.mixamorigTeeth_Up_Geo.skeleton}
                    />
                </group>
            </group>
        </group>
    );
}

useGLTF.preload('/models/playerModels/the_boss.glb');
